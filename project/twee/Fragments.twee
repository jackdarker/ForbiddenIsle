:: FI_InspectSelf [_back_]
<section><aside id="sidebar"></aside><article><%=window.story.render("CenterDialogs") %>
[[Back|_back_]]</br> Checking out <%=window.gm.player.name%>:</br>
<div id='output'><%=window.gm.printBodyDescription(window.gm.player,true)%><div>
<div id='output2'><%=JSON.stringify(window.gm.player.Effects.get("effMutator").sumupMutators()).replaceAll(',',', ')%><div>
</article><article id="LogPanel"></article></section>

:: FI_NeedsPlayer
<div id="needs"></div>
<script>function needs(){
    let msg="",x=window.gm.player.Stats.get("satiation").value,a=window.gm.player.Stats.get("arousal").value;
    if(x>70){
        msg="You are not thirsty/hungry. ";
    } else if(x>40) {
        msg="You are getting thirsty/hungry. ";
    } else if(x>25) {
        msg="You are really thirsty/hungry";
    } else if(x>10) {
        msg="<b>You are starving. Did you look around if there is something edidable?</b> ";
    } else {
        msg="<b>You are starving and would eat anything. Check your inventory for something to eat.</b> ";
    }
    if(a>80) {
        msg+="<b>You couldnt resist a good fuck right now.</b>";
    } else if(a>40) {
        msg+="<b>You are flush with arousal.</b> ";
        msg+=(window.gm.player.Stats.get("arousalRegen").value>0)?"And it might get worse.":"";
    } else if(a>25) {
        msg="<b>You are horny.</b> ";
    }
    return(msg);
}
window.gm.printOutput(needs(),'#needs');
</script>


:: FI_ChooseActivity
<%if(window.passage.name==="FI_BeachForest"){%>
    <%=window.gm.printGoto('FI_ForestWalk',{time:60,energy:-5},'Explore the closer area.')%></br>
    <%=(s.DngSY.exploreForest>=2)?window.gm.printGoto('FI_ScavengeFruit',{time:30*(1+2*s.NGP.xForestFood),energy:-5*(1+2*s.NGP.xForestFood)},'Pick some fruits that are in your hands reach.'):''%></br>
    <%=(s.DngSY.exploreForest>=1)?window.gm.printGoto('FI_ScavengeWood',{time:30,energy:-10},'Look around for some firewood'):''%></br>
    <%=(s.DngSY.exploreForest>=4)?window.gm.printGoto('FI_ShakeTree',{time:30,energy:-20},'Shake a tree'):''%></br>
    [[FI_DebugItem]]</br>
    [[explore western direction (toward beach)]]</br>
    [[explore northern direction (dense forest and mountains)]]</br>
<%}%>
<%if(["FI_BeachForest","FI_BeachNorth"].includes(window.passage.name) && window.gm.player.Stats.get("arousal").value>30){%>
    <%=window.gm.printGoto('FI_BeachMasturbate',{time:30,energy:-10},'Masturbation')%></br>
<%}%>


:: FI_NGPShop
<section><aside id="sidebar"></aside><article><%=window.story.render("CenterDialogs")%></br><%window.gm.player.location=window.passage.name;%>
<h2>New game plus</h2>
This is the New-Game-Plus Screen where you can configure your next play through.</br>
<a0 onclick='(function($event){document.querySelector("#"+id+"~p").toggleAttribute("hidden");})(this);'>Hint</a>
<p hidden>- Some game-events (BadEnds, maxing out Stats, some missions) may grant you either a NGP-token or reduce the cost of a NGP option.
</br>- spend those tokens here to make your life easier (or harder)
</br>- if you get a ingame notification that a option can be enabled for free, you can also activate them ingame. All other options need to be configured before game start.
</br>- Options with negative cost will give you credit that can be spent for other options. 
</br>- Earned tokens you dont spent get carried over in the new game but not (!) tokens you get credited for taking options with negative cost. 
</p>

<form>
<label>Category:
	<select id="category">
	<option value="0">select something</option>
	</select>
</label></br>
<label>Item:
	<select id="item">
	<option value="0">select category then item</option>
	</select>
</label>
<div id="output"></div></br>
<button type="button" onclick="buy()">activate</button> <div id="tokens"></div></br>
<button type="button" onclick="resetAll()">reset all</button>
</form>
</br>After selecting the options press here to <a0 onclick="start()"> start the game</a> !</br>
<div id="output2"></div></br>
<p hidden>TransformResistance
- Boost10Days: resistance to transformation is increased for a limited time
- TransformOnlyWeakend: Transforms occur only if you are in weak state
- SanityLossEasing (human): reduces sanity damage for transformation that only shift human appearance
- Selective: you may decide to reject a transformation 

Specialised TransformParameters
- FlatChested: Your tits tend to shrink
- Bulky: easier to keep a muscular build
- VagPrefered: More likely to gain a Vag then a cock

StartItems
- Compass: makes pathfinding easier in hard to navigate areas; Reliability dimish in some enviroments-
- Crowbar: important tool to open locked boxes and doors
- Lighter (full): 
- big pack of ProteinBars
- immun boosters: gives you transformation resistance for some time

StartCharacter
- decent swimmer: you didnt drown in swim training
- Twink: 
- Girl: you start as a girl
- less hetero: little closer to bi
- bi: swinging both ways
- deep breath: can hold your breath longer; might be useful for diving
- subby: having to submit to someone doesnt damage your dignity so much
- dominant: You are in control. But if you arent, dignity is damaged.


ItemMods
- replace american pisswater with strong bavarian bear:
- decreased clothing durability (also increases item escape chance)
- increased clothing durability


EventMods
- increased forest food-drop x3 (just less clicking)
- reduce care package chance
- disable TribeCapture Badend (unless provoked): 
- higher chance to find fetish item removal options</p>
</p>
</article><article id="LogPanel"></article></section>
<script>
function NOP(){return({OK:true,msg:""});}
function exclude(itmIdList){ 
    let res={OK:true,msg:""};
    for(var i=itmIdList.length-1;i>=0;i--){
        if(NGP.hasOwnProperty(itmIdList[i])){
            res.OK=false,res.msg+="Cannot be used with "+itmIdList[i]+".";
        }
    }
    return(res);
}
function include(itmIdList){ 
    let res={OK:true,msg:""};
    for(var i=itmIdList.length-1;i>=0;i--){
        if(!NGP.hasOwnProperty(itmIdList[i])){
            res.OK=false,res.msg+="requires also "+itmIdList[i]+".";
        }
    }
    return(res);
}
var NGP,ctrlCat,ctrlItem;
var catalog = [
    {catId:"startgear",desc:"Starting Gear",
    items:[
        {itmId:"Compass",name:"Compass",cost:{token:1},disabled:false,req:NOP,desc:"a compass that makes it easier to navigate in some areas"},
        {itmId:"ProteinBars",name:"a dozen proteinbars",cost:{token:1},disabled:false,req:NOP,desc:"a package of powerbars so you dont need something you dont want"}
    ]},
    {catId:"resistance",desc:"transformation resistance",
    items:[
        {itmId:"noSatiationWillKill",name:"survive if will&satiation is low",cost:{token:1},disabled:false,req:NOP,desc:"Bypass bad end if you are starving and have no will left."},
        {itmId:"increasedSatiation",name:"Satiation increased",cost:{token:1},disabled:false,req:NOP,desc:"Improved satiation when consuming food."},
        {itmId:"willOnSatiated",name:"Happy when well-fed",cost:{token:1},disabled:false,req:NOP,desc:"Eating while beeing mostly satiated gives you a little bit willpower. But you loose will if you are hungry."},
        //{itmId:"",name:"will gain when satiated",cost:{token:1},req:NOP,desc:"Eating while beeing mostly satiated gives you a little bit willpower."},
        {itmId:"transformWeakOnly",name:"transformWeakOnly",cost:{token:2},disabled:false,req:NOP,desc:"Transformations only take place in a weakend state."}
    ]},
    {catId:"itemMods",desc:"Item Mods",
    items:[
        {itmId:"decreasedClothDurability",name:"decreased clothing durability",cost:{token:1},disabled:false,req:exclude.bind(null,["increasedClothDurability"]),desc:"Clothes tend to break faster. Might help to get rid of some undesired things faster."},
        {itmId:"increasedClothDurability",name:"increased clothing durability",cost:{token:1},disabled:false,req:exclude.bind(null,["decreasedClothDurability"]),desc:"Clothes are much more durable, especially specific one."}
    ]},
    {catId:"eventMods",desc:"Event Mods",
    items:[
        {itmId:"xForestFood",name:"increased food-drop in forest",cost:{token:0},req:NOP,desc:"Gather more food at once from forest (just to reduce clicking)."}
    ]}
];
function resetAll(){
    let tk=0,x=window.gm.achievements;
    if(x.swamToFar>=1)tk++; //convert achievements to token here or unhide options
    if(x.starveBreakfast>=1)tk++;
    else findItem("noSatiationWillKill").disabled=true;
    NGP = {token:tk,tokenUsed:0};
    ctrlCat.value="";
    window.gm.printOutput("","#output2");
}
function updateText(event) {
    let msg=(!!ctrlItem.selectedObject?ctrlItem.selectedObject.desc:"");
    window.gm.printOutput(msg,"#output");
    window.gm.printOutput("Tokens left:"+(NGP.token-NGP.tokenUsed),"#tokens");
}
function buy(){
    let res,itm=ctrlItem.selectedObject, freeToken=NGP.token-NGP.tokenUsed;
    if(itm && !NGP[itm.itmId]) {
        res=itm.req();
        if(!res.OK){
            window.gm.printOutput(res.msg,"#output");
        }else if(itm.cost.token>freeToken){
            window.gm.printOutput("not enough token","#output");
        }else{
            NGP[itm.itmId]=1;   //s.NGP.ProteinBars
            NGP.tokenUsed+=itm.cost.token;
        }
    }
    window.gm.printOutput("Tokens left:"+(NGP.token-NGP.tokenUsed),"#tokens");
    window.gm.printOutput(JSON.stringify(NGP),"#output2");
}
function findItem(itmId){
    let itm=null;
    for(var cat of catalog){
        for(var it of cat.items){
            if(it.itmId===itmId) return(it);
        }
    }
    if(itm===null) throw new Error("unknown item " + itmId);
    return(itm);
}
function start() {
    window.gm.initGame(true,NGP);
    window.story.state.vars.spawnAt="FI_Entry"; //
    window.gm.enterVR();
    window.gm.forwardTime(1200);
    window.gm.player.levelUp(5);window.gm.player.autoLeveling();
}
function init(){
    var selCat = document.getElementById("category"),selItem = document.getElementById("item");
    ctrlCat = new window.gm.util.SelectionController(selCat), ctrlItem = new window.gm.util.SelectionController(selItem,ctrlCat);
    ctrlCat.getValueList=function(cat,sel) {
        return cat.map(item => ({value: item.catId,text: item.desc,disabled:false}));
    }
    ctrlCat.getValue=function(cat, sel) {
        return cat.find(item => item.catId == sel);
    }
    ctrlItem.getValueList=function(cat,sel) {
        return cat.items.map(item => ({value: item.itmId,
            text: item.name+ " ("+((item.cost.token>0)?item.cost.token+" token":"free")+")",
            disabled:item.disabled})); //todo: remove item instead 
    }
    ctrlItem.getValue=function(cat, sel) {
        return cat.items.find(item => item.itmId == sel);
    }
    ctrlCat.mapData(catalog);
    ctrlItem.addEventListener("change", updateText);
    resetAll();
}
init();
</script>